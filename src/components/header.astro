---
import { Icon } from "astro-icon";
import ThemeSwitcher from "~/components/theme-switcher.astro";
import type { CallToAction, NavItem } from "~/types";

const navItems: NavItem[] = [
  { title: "L'Essentiel", url: "#core-informations" },
  { title: "Services", url: "#services" },
  { title: "Stack Technique", url: "#technical-stack" },
  { title: "Clients", url: "#clients" },
  // { title: "Recommendations", url: "#referrals" },
];

const callToActions: CallToAction[] = [
  {
    title: "LinkedIn",
    icon: "mdi:linkedin",
    url: "https://www.linkedin.com/in/alexandre-martinez31000",
    target: "_blank",
  },
  {
    title: "CV",
    icon: "bi:cloud-download",
    fileName: `CV FR Freelance Angular Tech Lead DÃ©veloppeur Fullstack MARTINEZ Alexandre`,
    url: "/assets/docs/FR_Resume_Freelance_Angular_Tech_Lead_Fullstack_Developer_MARTINEZ_Alexandre.pdf",
    badge: "FR",
  },
  {
    title: "Resume",
    icon: "bi:cloud-download",
    fileName: `EN Resume Freelance Angular Tech Lead Fullstack Developer MARTINEZ Alexandre`,
    url: "/assets/docs/EN_Resume_Freelance_Angular_Tech_Lead_Fullstack_Developer_MARTINEZ_Alexandre.pdf",
    badge: "EN",
  },
];
---

<header
  id="page-header"
  class="absolute bottom-0 z-20 flex items-center justify-between w-full px-8 py-4 text-white border-b border-transparent flex gap-12"
>
  <div>
    <div class="flex items-center gap-6">
      <nav class="hidden lg:block">
        <ul class="flex items-center gap-6">
          {
            navItems.map(({ title, url }) => (
              <li>
                <a class="text-sm" href={url}>
                  <span>{title}</span>
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
      <button
        id="open-nav-button"
        type="button"
        class="btn lg:hidden"
        aria-label="Navigation"
      >
        <Icon pack="mdi" name="menu" class="h-8" aria-hidden="true" />
      </button>
      <ThemeSwitcher />
    </div>
    <div id="menu-modal" class="hidden modal" aria-hidden="true">
      <div class="fixed inset-0 px-8 py-4 bg-default text-default">
        <div class="space-y-4" role="dialog" aria-modal="true">
          <header class="text-right">
            <button
              id="close-nav-button"
              type="button"
              class="btn"
              aria-label="Close navigation"
            >
              <Icon pack="mdi" name="close" class="h-8" aria-hidden="true" />
            </button>
          </header>
          <nav>
            <ul class="flex flex-col">
              {
                navItems.map(({ title, url }) => (
                  <li>
                    <a class="block py-4 text-xl text-center" href={url}>
                      {title}
                    </a>
                  </li>
                ))
              }
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </div>
  <div class="flex gap-4 sm:gap-6 -z-10">
    {
      callToActions.map(({ title, url, icon, fileName, target, badge }) => (
        <a
          class="flex relative items-center sm:gap-3 text-sm border-2 border-current p-2 sm:pr-4"
          href={url}
          target={target}
          download={fileName}
        >
          <Icon name={icon} class="h-10" aria-hidden="true" />
          <span
            style={!!badge ? "left: 0.93rem" : "display:none"}
            class="bg-default absolute scale-75 top-3 text-xs rounded px-1 leading-none gradient-bg"
          >
            {badge}
          </span>
          <span class="hidden sm:block">{title}</span>
        </a>
      ))
    }
  </div>
</header>

<script>
  import MicroModal from "micromodal";
  import invariant from "tiny-invariant";

  const menuModalId = "menu-modal";

  const header = document.querySelector("#page-header") as HTMLElement;
  const page = document.documentElement;
  const menu = document.querySelector(`#${menuModalId} ul`);
  const openNavButton = document.querySelector("#open-nav-button");
  const closeNavButton = document.querySelector("#close-nav-button");

  invariant(header, "header should not be null");
  invariant(menu, "menu should not be null");
  invariant(openNavButton, "openNavButton should not be null");
  invariant(closeNavButton, "closeNavButton should not be null");

  const openMenu = () => {
    MicroModal.show(menuModalId, { disableScroll: true });
  };

  const closeMenu = () => {
    MicroModal.close(menuModalId);
  };

  openNavButton.addEventListener("click", openMenu);
  closeNavButton.addEventListener("click", closeMenu);

  document.addEventListener("scroll", () => {
    const d = page.clientHeight - page.scrollTop - header.offsetHeight;
    header.classList.toggle("fixed-header", d < 0);
  });

  menu.addEventListener("click", (event) => {
    if ((event.target as HTMLElement).tagName === "A") {
      closeMenu();
    }
  });
</script>

<noscript>
  <style>
    #open-nav-button {
      display: none;
    }
  </style>
</noscript>

<style>
  .fixed-header {
    @apply fixed top-0 bottom-auto;
    @apply text-default bg-default border-default;
  }
  .modal.is-open {
    @apply block;
  }
</style>
